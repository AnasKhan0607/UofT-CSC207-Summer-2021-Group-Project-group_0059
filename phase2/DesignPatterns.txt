Design Patterns used for each branch and classes involved
- Game
    - Dependency Injection
        - Classes used: GameStorage, UserData, TemplateData
        - Dependency Injection was used to remove the dependency between Game and GameTree
        (using Game Storage) by injecting GameTree into Game as the type GameStorage which
        is a interface that requires class that implements it to provide the storage service.
        - Dependency injection was used to remove the dependency between Game controller and
        the template controller (using TemplateData), and the game controller and the
        user controller (Using userData) as these two interface provides service of providing
        template data and userData. Both Template controller and user controller are injected
        into the Game Controllers.
    - Adapter
        - Classes used: GameWrapper, GamePresenter
        - A wrapper class was used to wrap objects with VBox (and some other javafx objects),
        implementing wrapper methods so that the GamePresenter class can interact with
        VBox (and some other javafx objects) in the way that is desired.
- Template
    - Dependency Injection
- User
    - Dependency Injection
        - Classes used: LoadSave, UserGate, MessageGate, UserManager, MessageManager, UserSignupController, UserLoginController
        - Dependency injection was used to remove dependency between the Use Case and Gateway classes - by using the LoadSave interface,
        the Use Case classes such as UserManager and MessageManager could use the LoadSave class as an injector for the UserGate/MessageGate classes,
        so the services of the Gateway classes could be used (storing data in files outside the program) in the Use Case classes without hard dependencies.
        - Dependency Injection was also used between the Controller and Entity layers - during the signup and login processes, unwanted dependencies are
        avoided between the two layers because the Controller classes do not create Entity objects (such as the User objects) directly, but rather the 
        UserManager class is used instead - for example, when creating a new user, the addUser() method in the Use Case is called from the Controller, rather than
        create a new User object directly.